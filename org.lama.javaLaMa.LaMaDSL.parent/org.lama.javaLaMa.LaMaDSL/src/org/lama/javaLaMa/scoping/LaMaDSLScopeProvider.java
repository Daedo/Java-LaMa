/*
 * generated by Xtext 2.25.0
 */
package org.lama.javaLaMa.scoping;

import java.util.HashSet;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtext.scoping.impl.ImportedNamespaceAwareLocalScopeProvider;
import org.lama.javaLaMa.laMaDSL.DependencyTagsetImport;
import org.lama.javaLaMa.laMaDSL.POSTagsetImport;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class LaMaDSLScopeProvider extends ImportedNamespaceAwareLocalScopeProvider {
	HashSet<EObject> resolvingObjects = new HashSet<>();
	
	
	@Override
	protected String getImportedNamespace(EObject object) {
		EStructuralFeature feature = object.eClass().getEStructuralFeature("importedNamespace");
		if (feature != null && String.class.equals(feature.getEType().getInstanceClass())) {
			return (String) object.eGet(feature);
		}
		
		if(object instanceof POSTagsetImport || object instanceof DependencyTagsetImport) {
			// To avoid cyclical resolving, we keep track of all imports we are doing
			if(resolvingObjects.contains(object)) {
				return null;
			}
			resolvingObjects.add(object);
			EObject tagImport = (EObject) object.eGet(feature, true);
			resolvingObjects.remove(object);
			EStructuralFeature featureName = tagImport.eClass().getEStructuralFeature("name");
			String name = (String)tagImport.eGet(featureName);
			return name +".*";
		}
		return null;
	}
}
